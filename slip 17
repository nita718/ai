Q1. Write a Program to Implement Depth First Search using Python.
class Graph:
    def __init__(self):
        self.graph = {}
    
    def add_edge(self, u, v):
        if u not in self.graph:
            self.graph[u] = []
        self.graph[u].append(v)
    
    def dfs(self, start):
        visited = set()
        self.dfs_util(start, visited)
    
    def dfs_util(self, node, visited):
        visited.add(node)
        print(node, end=' ')
        
        for neighbor in self.graph.get(node, []):
            if neighbor not in visited:
                self.dfs_util(neighbor, visited)

# Initialize the graph
g = Graph()

# Define the edges of the graph (example)
edges = [
    (0, 1), (0, 2), (1, 2), (2, 0), (2, 3), (3, 3)
]

# Add edges to the graph
for u, v in edges:
    g.add_edge(u, v)

# Perform DFS starting from node 2
start_node = 2
g.dfs(start_node)

Q2. Write a Python program to solve water jug problem.
from collections import deque

def is_valid_state(state, capacities):
    return 0 <= state[0] <= capacities[0] and 0 <= state[1] <= capacities[1]

def bfs(capacities, target):
    start_state = (0, 0)
    visited = set()
    queue = deque([(start_state, [])])
    
    while queue:
        (current_state, path) = queue.popleft()
        
        if current_state in visited:
            continue
        
        visited.add(current_state)
        
        if current_state[0] == target or current_state[1] == target:
            path.append(current_state)
            return path
        
        path.append(current_state)
        
        # Fill the first jug
        next_state = (capacities[0], current_state[1])
        if is_valid_state(next_state, capacities):
            queue.append((next_state, path.copy()))
        
        # Fill the second jug
        next_state = (current_state[0], capacities[1])
        if is_valid_state(next_state, capacities):
            queue.append((next_state, path.copy()))
        
        # Empty the first jug
        next_state = (0, current_state[1])
        if is_valid_state(next_state, capacities):
            queue.append((next_state, path.copy()))
        
        # Empty the second jug
        next_state = (current_state[0], 0)
        if is_valid_state(next_state, capacities):
            queue.append((next_state, path.copy()))
        
        # Pour water from the first jug to the second jug
        pour = min(current_state[0], capacities[1] - current_state[1])
        next_state = (current_state[0] - pour, current_state[1] + pour)
        if is_valid_state(next_state, capacities):
            queue.append((next_state, path.copy()))
        
        # Pour water from the second jug to the first jug
        pour = min(current_state[1], capacities[0] - current_state[0])
        next_state = (current_state[0] + pour, current_state[1] - pour)
        if is_valid_state(next_state, capacities):
            queue.append((next_state, path.copy()))
    
    return None

# Define the capacities of the jugs and the target amount
capacities = (4, 3)
target = 2

# Solve the problem
solution_path = bfs(capacities, target)
if solution_path:
    print("Solution path:")
    for state in solution_path:
        print(state)
else:
    print("No solution found.")

           OR
Q2. Write a program to implement Tic-Tac-Toe_take.
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board):
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != ' ':
            return row[0]
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != ' ':
            return board[0][col]
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != ' ':
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != ' ':
        return board[0][2]
    return None

def is_board_full(board):
    for row in board:
        for cell in row:
            if cell == ' ':
                return False
    return True

def tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'
    winner = None

    while not winner and not is_board_full(board):
        print_board(board)
        row = int(input(f"Player {current_player}, enter the row (0, 1, or 2): "))
        col = int(input(f"Player {current_player}, enter the column (0, 1, or 2): "))
        
        if board[row][col] == ' ':
            board[row][col] = current_player
            winner = check_winner(board)
            current_player = 'O' if current_player == 'X' else 'X'
        else:
            print("Cell is already taken. Try again.")

    print_board(board)
    if winner:
        print(f"Player {winner} wins!")
    else:
        print("It's a tie!")

if __name__ == "__main__":
    tic_tac_toe()
