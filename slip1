Q1. Implement Dijkstra's Algorithm to find the shortest path from a single source for the following  graph G. [10 Marks]  
import heapq

# Graph represented using an adjacency list
graph_dijkstra = {
    'A': [('B', 4), ('C', 5)],
    'B': [('A', 4), ('D', 9), ('E', 7)],
    'C': [('A', 5), ('E', 3)],
    'D': [('B', 9), ('F', 2)],
    'E': [('B', 7), ('C', 3), ('F', 13)],
    'F': [('D', 2), ('E', 13)]
}

def dijkstra(graph, start):
    # Distance dictionary with initial distances set to infinity
    distances = {node: float('inf') for node in graph}
    distances[start] = 0  # Start node has a distance of 0
    priority_queue = [(0, start)]  # Priority queue to get the node with minimum distance

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        # Only continue if this is the shortest recorded distance to the node
        if current_distance > distances[current_node]:
            continue

        # Check neighbors
        for neighbor, weight in graph[current_node]:
            distance = current_distance + weight

            # If a shorter path to neighbor is found
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances

# Example usage of Dijkstra's Algorithm starting from node 'A'
dijkstra_result = dijkstra(graph_dijkstra, 'A')
print("Shortest paths from node A:", dijkstra_result)

Q2. Write a Python program to implement Depth First Search algorithm. Refer the following graph  as an input for the program. [Initial node=1,Goal node=8] [20 Marks] 
# Graph represented as an adjacency list
graph_dfs = {
    1: [2, 3],
    2: [1, 4, 5],
    3: [1, 6, 7],
    4: [2, 8],
    5: [2, 8],
    6: [3, 8],
    7: [3, 8],
    8: [4, 5, 6, 7]
}

def dfs(graph, start, goal, path=None, visited=None):
    if path is None:
        path = []
    if visited is None:
        visited = set()

    # Add the current node to the path and mark it as visited
    path.append(start)
    visited.add(start)

    # If we have reached the goal node, return the path
    if start == goal:
        return path

    # Recursive DFS on all unvisited neighbors
    for neighbor in graph[start]:
        if neighbor not in visited:
            result = dfs(graph, neighbor, goal, path, visited)
            if result:  # If a path is found, return it
                return result

    # Backtrack if no path is found
    path.pop()
    return None

# Example usage of DFS from node 1 to node 8
dfs_path_result = dfs(graph_dfs, 1, 8)
print("Path from node 1 to node 8 using DFS:", dfs_path_result)
 
            OR
Q2. Write a Program to Implement Monkey Banana Problem using Python.
class MonkeyBananaProblem:
    def __init__(self):
        # Initial state
        self.monkey_position = "at_door"  # Options: at_door, at_middle, at_box
        self.box_position = "middle_of_room"  # Options: middle_of_room, under_banana
        self.monkey_on_box = False
        self.has_banana = False

    def move(self, position):
        """ Move the monkey to a specified position """
        print(f"Monkey moves to {position}.")
        self.monkey_position = position

    def push_box(self):
        """ Push the box under the banana if monkey is at the box position """
        if self.monkey_position == "at_box" and self.box_position != "under_banana":
            print("Monkey pushes the box under the banana.")
            self.box_position = "under_banana"
        else:
            print("Monkey cannot push the box from here.")

    def climb_box(self):
        """ Climb on the box if it is under the banana """
        if self.monkey_position == "at_box" and self.box_position == "under_banana":
            print("Monkey climbs on the box.")
            self.monkey_on_box = True
        else:
            print("Monkey cannot climb the box from here.")

    def grab_banana(self):
        """ Grab the banana if the monkey is on the box under the banana """
        if self.monkey_on_box and self.box_position == "under_banana":
            print("Monkey grabs the banana!")
            self.has_banana = True
        else:
            print("Monkey cannot reach the banana from here.")

    def solve(self):
        """ Solve the Monkey Banana Problem """
        # Step 1: Move to the box
        self.move("at_box")

        # Step 2: Push the box under the banana
        self.push_box()

        # Step 3: Climb on the box
        self.climb_box()

        # Step 4: Grab the banana
        self.grab_banana()

        # Check if the goal is achieved
        if self.has_banana:
            print("Monkey successfully got the banana!")
        else:
            print("Monkey failed to get the banana.")

# Run the Monkey Banana Problem solver
problem = MonkeyBananaProblem()
problem.solve()


  

