Q1. Use an undirected graph and develop a recursive algorithm for searching all the vertices of a graph.
def dfs(graph, vertex, visited=None):
    if visited is None:
        visited = set()
    visited.add(vertex)
    print(vertex, end=" ")
    
    for neighbor in graph[vertex]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)

# Example usage
graph = {
    1: [2, 3, 4],
    2: [1, 4, 5],
    3: [1, 4],
    4: [1, 2, 3, 5],
    5: [2, 4, 6, 7],
    6: [5],
    7: [5]
}

# Starting DFS from vertex 1
dfs(graph, 1)

Q2. Write a Python program to implement Depth First Search algorithm. Refer the following graph as an Input for the program. [Initial node=2,Goal node=7]
def dfs_search(graph, start, goal, path=None):
    if path is None:
        path = []
    path.append(start)

    if start == goal:
        return path
    
    for neighbor in graph[start]:
        if neighbor not in path:
            result = dfs_search(graph, neighbor, goal, path)
            if result is not None:
                return result
    path.pop()
    return None

# Example graph
graph = {
    1: [2, 3, 4],
    2: [1, 4, 5],
    3: [1, 4],
    4: [1, 2, 3, 5],
    5: [2, 4, 6, 7],
    6: [5],
    7: [5]
}

# Perform DFS from node 2 to node 7
start_node = 2
goal_node = 7
path = dfs_search(graph, start_node, goal_node)
print(f"Path from node {start_node} to node {goal_node}: {path}")

                   OR
Q2. Write a Program to Implement Tic-Tac-Toe game using Python.
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board, mark):
    for row in board:
        if all(s == mark for s in row):
            return True
    for col in range(3):
        if all(row[col] == mark for row in board):
            return True
    if all(board[i][i] == mark for i in range(3)) or all(board[i][2-i] == mark for i in range(3)):
        return True
    return False

def tic_tac_toe():
    board = [[" " for _ in range(3)] for _ in range(3)]
    players = ["X", "O"]
    turns = 0

    while turns < 9:
        print_board(board)
        player = players[turns % 2]
        row, col = map(int, input(f"Player {player}, enter your move (row col): ").split())
        if board[row][col] == " ":
            board[row][col] = player
            turns += 1
            if check_winner(board, player):
                print_board(board)
                print(f"Player {player} wins!")
                return
        else:
            print("Invalid move, try again.")
    
    print_board(board)
    print("It's a tie!")

# Start the game
tic_tac_toe()
