Q1. Write a Program to Implement Depth First Search using Python.
class Graph:
    def __init__(self):
        self.graph = {}
    
    def add_edge(self, u, v):
        if u not in self.graph:
            self.graph[u] = []
        self.graph[u].append(v)
    
    def dfs(self, start):
        visited = set()
        self.dfs_util(start, visited)
    
    def dfs_util(self, node, visited):
        visited.add(node)
        print(node, end=' ')
        
        for neighbor in self.graph.get(node, []):
            if neighbor not in visited:
                self.dfs_util(neighbor, visited)

# Initialize the graph
g = Graph()

# Define the edges of the graph (example)
edges = [
    (0, 1), (0, 2), (1, 2), (2, 0), (2, 3), (3, 3)
]

# Add edges to the graph
for u, v in edges:
    g.add_edge(u, v)

# Perform DFS starting from node 2
start_node = 2
g.dfs(start_node)

Q2. Write a Python program to implement Breadth First Search algorithm. Refer the following
graph as an Input for the program.[Initial node=1,Goal node=8]
from collections import deque

# Define the graph as an adjacency list based on the given image
graph = {
    1: [2, 3, 4],
    2: [1, 3],
    3: [1, 2, 5, 6],
    4: [1],
    5: [3, 7],
    6: [3, 8],
    7: [5, 8],
    8: [6, 7]
}

# Breadth-First Search function to find the shortest path
def bfs(graph, start, goal):
    queue = deque([[start]])
    visited = set()

    while queue:
        path = queue.popleft()
        node = path[-1]

        if node == goal:
            return path

        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                new_path = list(path)
                new_path.append(neighbor)
                queue.append(new_path)
                
    return None

# Example usage
start_node = 1
goal_node = 8
path = bfs(graph, start_node, goal_node)
print(f"Shortest path from {start_node} to {goal_node} using BFS: {path}")

              OR
Q2. Write a program to implement A* algorithm.
import heapq

# Directions for moving in 4 directions (up, down, left, right)
DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]

# A* algorithm implementation
def a_star(start, goal, grid):
    """
    A* algorithm to find the shortest path from start to goal in a grid.

    :param start: (x, y) tuple for the start position
    :param goal: (x, y) tuple for the goal position
    :param grid: 2D list representing the grid (0 for free space, 1 for obstacles)
    :return: List of path from start to goal if path exists, otherwise an empty list
    """
    # Priority queue to store (f, g, h, current position)
    open_list = []
    heapq.heappush(open_list, (0, 0, manhattan_heuristic(start, goal), start))  # f = g + h

    # To keep track of the lowest g score for each cell
    g_costs = {start: 0}
    
    # To keep track of the parent of each node for path reconstruction
    came_from = {}

    while open_list:
        # Get the node with the lowest f value
        _, g, _, current = heapq.heappop(open_list)

        # If we reach the goal, reconstruct the path
        if current == goal:
            return reconstruct_path(came_from, current)

        # Explore neighbors (up, down, left, right)
        for direction in DIRECTIONS:
            neighbor = (current[0] + direction[0], current[1] + direction[1])

            # Skip out-of-bound or blocked cells
            if not is_valid_move(neighbor, grid):
                continue

            # Calculate g, h, and f for the neighbor
            tentative_g = g + 1  # Assuming uniform cost (1 for each step)
            if neighbor not in g_costs or tentative_g < g_costs[neighbor]:
                g_costs[neighbor] = tentative_g
                f = tentative_g + manhattan_heuristic(neighbor, goal)
                heapq.heappush(open_list, (f, tentative_g, manhattan_heuristic(neighbor, goal), neighbor))
                came_from[neighbor] = current

    return []  # No path found

# Manhattan Distance Heuristic (h)
def manhattan_heuristic(a, b):
    """
    Manhattan distance heuristic between two points a and b on the grid.
    :param a: (x, y) tuple for point a
    :param b: (x, y) tuple for point b
    :return: Manhattan distance (sum of absolute differences in x and y)
    """
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

# Function to reconstruct the path from the 'came_from' dictionary
def reconstruct_path(came_from, current):
    path = [current]
    while current in came_from:
        current = came_from[current]
        path.append(current)
    return path[::-1]  # Reverse the path to get it from start to goal

# Check if a move is valid (within bounds and not blocked)
def is_valid_move(position, grid):
    x, y = position
    if 0 <= x < len(grid) and 0 <= y < len(grid[0]):  # In bounds
        return grid[x][y] == 0  # Not an obstacle (0 is free space)
    return False

# Example Grid (0 = free, 1 = obstacle)
grid = [
    [0, 0, 0, 0, 0],
    [0, 1, 1, 0, 0],
    [0, 0, 0, 1, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 0, 0]
]

# Start and Goal positions
start = (0, 0)
goal = (4, 4)

# Running the A* algorithm
path = a_star(start, goal, grid)

# Output the result
if path:
    print("Path found:")
    print(path)
else:
    print("No path found.")
