Q1. Given an array of integers, write a Python Program to sort the array in ascending order using Selection Sort. [10]
def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        # Assume the current index as the minimum
        min_index = i
        # Find the minimum element in the unsorted part
        for j in range(i + 1, n):
            if arr[j] < arr[min_index]:
                min_index = j
        # Swap the found minimum element with the first element
        arr[i], arr[min_index] = arr[min_index], arr[i]

# Example usage
array = [64, 25, 12, 22, 11]
print("Original array:", array)
selection_sort(array)
print("Sorted array:", array)

Q2. Implement Minimum Spanning Tree using Kruskalâ€™s Algorithm.
class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.edges = []

    def add_edge(self, u, v, w):
        self.edges.append((w, u, v))

    def find(self, parent, i):
        if parent[i] == i:
            return i
        return self.find(parent, parent[i])

    def union(self, parent, rank, x, y):
        xroot = self.find(parent, x)
        yroot = self.find(parent, y)
        if rank[xroot] < rank[yroot]:
            parent[xroot] = yroot
        elif rank[xroot] > rank[yroot]:
            parent[yroot] = xroot
        else:
            parent[yroot] = xroot
            rank[xroot] += 1

    def kruskal_mst(self):
        result = []  # Store the resultant MST
        i, e = 0, 0  # Initialize indices for sorted edges
        self.edges = sorted(self.edges)  # Sort edges by weight
        parent = []
        rank = []
        for node in range(self.V):
            parent.append(node)
            rank.append(0)

        while e < self.V - 1:
            w, u, v = self.edges[i]
            i += 1
            x = self.find(parent, u)
            y = self.find(parent, v)
            if x != y:
                e += 1
                result.append((u, v, w))
                self.union(parent, rank, x, y)

        # Print the resultant MST
        print("Edges in the MST:")
        for u, v, w in result:
            print(f"{u} -- {v} == {w}")

# Example usage
g = Graph(4)
g.add_edge(0, 1, 10)
g.add_edge(0, 2, 6)
g.add_edge(0, 3, 5)
g.add_edge(1, 3, 15)
g.add_edge(2, 3, 4)

g.kruskal_mst()

                        OR
Q2. Write a Program to implement 8-Puzzle problem using Python.
import heapq

# Function to calculate Manhattan distance
def manhattan_distance(state, goal):
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                x, y = divmod(goal.index(state[i][j]), 3)
                distance += abs(x - i) + abs(y - j)
    return distance

# A* algorithm for 8-puzzle
def a_star_8_puzzle(start, goal):
    goal_flat = [tile for row in goal for tile in row]
    start_flat = [tile for row in start for tile in row]
    
    # Priority queue
    open_list = []
    heapq.heappush(open_list, (0, start_flat, []))  # (f, state, path)

    # Set of visited states
    visited = set()

    while open_list:
        _, current, path = heapq.heappop(open_list)
        
        # Check if we have reached the goal
        if current == goal_flat:
            return path + [goal]
        
        visited.add(tuple(current))
        
        # Find the position of the empty tile (0)
        zero_pos = current.index(0)
        x, y = divmod(zero_pos, 3)

        # Possible moves (up, down, left, right)
        moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        for dx, dy in moves:
            new_x, new_y = x + dx, y + dy
            if 0 <= new_x < 3 and 0 <= new_y < 3:
                # Calculate new position of 0
                new_pos = new_x * 3 + new_y
                new_state = current[:]
                new_state[zero_pos], new_state[new_pos] = new_state[new_pos], new_state[zero_pos]

                if tuple(new_state) not in visited:
                    g = len(path) + 1
                    h = manhattan_distance([new_state[i:i+3] for i in range(0, 9, 3)], goal)
                    f = g + h
                    heapq.heappush(open_list, (f, new_state, path + [[new_state[i:i+3] for i in range(0, 9, 3)]]))

    return None  # No solution

# Example usage
start = [
    [1, 2, 3],
    [4, 0, 5],
    [7, 8, 6]
]

goal = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

solution = a_star_8_puzzle(start, goal)
if solution:
    for step in solution:
        for row in step:
            print(row)
        print()
else:
    print("No solution found.")
