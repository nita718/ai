Q1. Write a Program to Implement Breadth First Search using Python.
from collections import deque

def bfs(graph, start):
    visited = set()
    queue = deque([start])
    visited.add(start)

    while queue:
        # Dequeue a node from the front
        node = queue.popleft()
        print(node, end=" ")

        # Go through all the neighbors of this node
        for neighbor in graph[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)

# Graph representation of the given tree
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F', 'G'],
    'D': ['H', 'I'],
    'E': [],
    'F': [],
    'G': ['K'],
    'H': [],
    'I': [],
    'K': []
}

# Perform BFS from the starting node 'A'
print("BFS traversal starting from node A:")
bfs(graph, 'A')

Q2. Write a program to implement Iterative Deepening DFS algorithm. [20 Marks] [ Goal Node =G]
def dls(graph, node, goal, depth):
    # Perform Depth-Limited Search up to a certain depth
    if depth == 0 and node == goal:
        return True
    if depth > 0:
        for neighbor in graph.get(node, []):
            if dls(graph, neighbor, goal, depth - 1):
                return True
    return False

def iddfs(graph, start, goal):
    # Iteratively increase depth limit until we find the goal node
    depth = 0
    while True:
        print(f"Searching at depth {depth}")
        if dls(graph, start, goal, depth):
            print(f"Goal node '{goal}' found at depth {depth}")
            return True
        depth += 1

# Graph representation of the given tree
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F', 'G'],
    'D': ['H', 'I'],
    'E': [],
    'F': [],
    'G': ['K'],
    'H': [],
    'I': [],
    'K': []
}

# Perform IDDFS to find the goal node 'G' starting from 'A'
print("\nIDDFS search for node 'G':")
iddfs(graph, 'A', 'G')

                  OR
 Q2. Write a program to conduct min - max algorithm
 import math

# Define the utility of the game for each position (This is an example)
# Positive values mean a win for the maximizer, negative for the minimizer
def evaluate(board):
    # This function returns the evaluation of the board state (win/loss/draw)
    # In a real game, this could be a complex evaluation, here for simplicity, we use 0 for draw, +1 for win, -1 for loss
    # Assuming 1 for maximizer (X) win, -1 for minimizer (O) win, and 0 for draw
    if is_winner(board, 'X'):
        return 1  # Maximizer win
    elif is_winner(board, 'O'):
        return -1  # Minimizer win
    else:
        return 0  # Draw or ongoing

def is_winner(board, player):
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if all([board[i][j] == player for j in range(3)]) or all([board[j][i] == player for j in range(3)]):
            return True
    if all([board[i][i] == player for i in range(3)]) or all([board[i][2-i] == player for i in range(3)]):
        return True
    return False

def is_full(board):
    # Check if the board is full (i.e., no empty spaces left)
    for row in board:
        if ' ' in row:
            return False
    return True

# Min-Max algorithm
def min_max(board, depth, maximizing_player):
    # Check for terminal condition (win, loss, draw, or depth limit)
    score = evaluate(board)
    if score == 1 or score == -1:  # Maximizer or Minimizer wins
        return score
    if is_full(board):  # Draw condition
        return 0
    if depth == 0:  # Depth limit reached
        return 0
    
    if maximizing_player:
        best = -math.inf  # Best score for maximizer
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'  # Try the maximizer's move
                    best = max(best, min_max(board, depth - 1, False))  # Recursively call min-max for the minimizer
                    board[i][j] = ' '  # Undo move
        return best
    else:
        best = math.inf  # Best score for minimizer
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'  # Try the minimizer's move
                    best = min(best, min_max(board, depth - 1, True))  # Recursively call min-max for the maximizer
                    board[i][j] = ' '  # Undo move
        return best

# Function to find the best move for the current player
def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)

    # Try every possible move for the maximizing player (X)
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'  # Try this move for the maximizer (X)
                move_val = min_max(board, 0, False)  # Min-Max with no depth limit
                board[i][j] = ' '  # Undo move

                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

    return best_move

# Function to print the board
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

# Sample board for Tic-Tac-Toe
board = [
    ['X', 'O', 'X'],
    ['O', 'X', ' '],
    [' ', ' ', 'O']
]

# Find the best move for 'X' (the maximizer)
best_move = find_best_move(board)
print("Best move for 'X':", best_move)

# Print the board after making the best move
board[best_move[0]][best_move[1]] = 'X'
print_board(board)
