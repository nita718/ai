Q1. Write a program to implement Best First Search.
import heapq

# A class to represent a node in the search tree
class Node:
    def __init__(self, position, heuristic=0):
        self.position = position  # (x, y) position on the grid
        self.heuristic = heuristic  # heuristic value (e.g., Manhattan distance)
        self.parent = None  # Parent node to reconstruct the path
    
    def __lt__(self, other):
        # This is used by heapq to compare nodes based on heuristic
        return self.heuristic < other.heuristic

# Manhattan distance heuristic function
def manhattan_distance(current, goal):
    return abs(current[0] - goal[0]) + abs(current[1] - goal[1])

# Best-First Search Algorithm
def best_first_search(start, goal, grid):
    # Create the priority queue for Best-First Search
    open_list = []
    
    # Initialize the starting node
    start_node = Node(start, manhattan_distance(start, goal))
    
    # Push the start node to the priority queue
    heapq.heappush(open_list, start_node)
    
    # Set of visited nodes
    visited = set()
    visited.add(start)
    
    # Directions: Up, Down, Left, Right
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    
    while open_list:
        # Get the node with the smallest heuristic value
        current_node = heapq.heappop(open_list)
        
        # If we reach the goal, reconstruct the path
        if current_node.position == goal:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return the reversed path
        
        # Explore the neighbors
        for direction in directions:
            neighbor = (current_node.position[0] + direction[0], current_node.position[1] + direction[1])
    
Q2. Write a Program to implement 8-Puzzle problem using Python.
from queue import PriorityQueue

def heuristic(state, goal):
    return sum(s != g for s, g in zip(state, goal))

def get_neighbors(state):
    neighbors = []
    blank = state.index(0)
    directions = {'up': -3, 'down': 3, 'left': -1, 'right': 1}
    
    for direction, move in directions.items():
        new_blank = blank + move
        if 0 <= new_blank < 9:
            new_state = list(state)
            new_state[blank], new_state[new_blank] = new_state[new_blank], new_state[blank]
            neighbors.append(tuple(new_state))
    
    return neighbors

def a_star(start, goal):
    frontier = PriorityQueue()
    frontier.put((0, start))
    came_from = {start: None}
    cost_so_far = {start: 0}
    
    while not frontier.empty():
        _, current = frontier.get()
        
        if current == goal:
            break
        
        for neighbor in get_neighbors(current):
            new_cost = cost_so_far[current] + 1
            if neighbor not in cost_so_far or new_cost < cost_so_far[neighbor]:
                cost_so_far[neighbor] = new_cost
                priority = new_cost + heuristic(neighbor, goal)
                frontier.put((priority, neighbor))
                came_from[neighbor] = current
    
    return came_from

# Example usage
start_state = (1, 2, 3, 4, 5, 6, 7, 8, 0)
goal_state = (1, 2, 3, 4, 5, 6, 7, 0, 8)
print(a_star(start_state, goal_state))

          Or
Q2. Solve traveling salesman problem using artificial intelligence technique.
import random

def create_route(cities):
    route = random.sample(cities, len(cities))
    return route

def calculate_distance(route):
    distance = 0
    for i in range(len(route)):
        distance += route[i].distance(route[(i + 1) % len(route)])
    return distance

def mutate(route):
    i, j = random.sample(range(len(route)), 2)
    route[i], route[j] = route[j], route[i]
    return route

def crossover(parent1, parent2):
    child = parent1[:len(parent1)//2] + [city for city in parent2 if city not in parent1]
    return child

def genetic_algorithm(cities, population_size, generations):
    population = [create_route(cities) for _ in range(population_size)]
    for _ in range(generations):
        population = sorted(population, key=calculate_distance)
        next_generation = population[:population_size//2]
        
        for i in range(population_size//2):
            parent1 = random.choice(next_generation)
            parent2 = random.choice(next_generation)
            child = mutate(crossover(parent1, parent2))
            next_generation.append(child)
        
        population = next_generation
    
    return min(population, key=calculate_distance)

# Example usage
class City:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def distance(self, other):
        return ((self.x - other.x) ** 2 + (self.y - other.y) ** 2) ** 0.5

cities = [City(random.randint(0, 200), random.randint(0, 200)) for _ in range(10)]
best_route = genetic_algorithm(cities, 100, 100)
print(best_route)
