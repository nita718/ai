Q1. Write a Program to Implement Depth First Search using Python. [10 Marks]
# Graph represented as an adjacency list
graph = {
    1: [2, 3, 4],
    2: [1, 5, 6],
    3: [1, 4],
    4: [1, 3, 5],
    5: [2, 4, 6, 7],
    6: [2, 5],
    7: [5]
}

# DFS function
def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()  # Use a set to keep track of visited nodes
    visited.add(start)
    print(start, end=" ")  # Print the node as we visit it

    # Recur for all the vertices adjacent to this vertex
    for neighbor in graph[start]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)

# Run DFS starting from node 1
dfs(graph, 1)

Q2. Write a program to implement A* algorithm.
import heapq

# Manhattan distance heuristic function
def manhattan_distance(start, goal):
    return abs(start[0] - goal[0]) + abs(start[1] - goal[1])

# A* algorithm
def a_star(start, goal, grid):
    # Open list (priority queue)
    open_list = []
    heapq.heappush(open_list, (0 + manhattan_distance(start, goal), 0, start))  # (f, g, node)
    
    # Came from map to reconstruct the path
    came_from = {}
    
    # Cost from start to the current node
    g_cost = {start: 0}
    
    while open_list:
        # Get the node with the lowest f value
        _, current_g, current_node = heapq.heappop(open_list)

        if current_node == goal:
            # Reconstruct the path
            path = []
            while current_node in came_from:
                path.append(current_node)
                current_node = came_from[current_node]
            path.append(start)
            return path[::-1]  # Return the path from start to goal
        
        # Get neighbors
        neighbors = [(current_node[0] + 1, current_node[1]), (current_node[0] - 1, current_node[1]),
                     (current_node[0], current_node[1] + 1), (current_node[0], current_node[1] - 1)]

        for neighbor in neighbors:
            # Check if neighbor is within grid bounds and is walkable (assuming grid is a 2D list)
            if 0 <= neighbor[0] < len(grid) and 0 <= neighbor[1] < len(grid[0]) and grid[neighbor[0]][neighbor[1]] != 1:
                tentative_g = current_g + 1
                if neighbor not in g_cost or tentative_g < g_cost[neighbor]:
                    g_cost[neighbor] = tentative_g
                    f = tentative_g + manhattan_distance(neighbor, goal)
                    heapq.heappush(open_list, (f, tentative_g, neighbor))
                    came_from[neighbor] = current_node

    return None  # If there's no path

# Example usage
grid = [
    [0, 0, 0, 0],
    [0, 1, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0]
]

start = (0, 0)
goal = (3, 3)

path = a_star(start, goal, grid)
print("Path from start to goal:", path)

        OR
Q2. Write a Program to Implement Tic-Tac-Toe game using Python.
# Function to print the Tic-Tac-Toe board
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

# Function to check if there's a winner
def check_winner(board, player):
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if all([cell == player for cell in board[i]]) or all([board[j][i] == player for j in range(3)]):
            return True
    if board[0][0] == player and board[1][1] == player and board[2][2] == player:
        return True
    if board[0][2] == player and board[1][1] == player and board[2][0] == player:
        return True
    return False

# Function to check if the board is full (no more moves)
def is_board_full(board):
    for row in board:
        if ' ' in row:
            return False
    return True

# Main function to play Tic-Tac-Toe
def tic_tac_toe():
    # Initialize the board
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'

    while True:
        print_board(board)
        print(f"Player {current_player}'s turn")
        
        # Get the player's move
        row, col = map(int, input(f"Enter row and column (0-2) for {current_player}: ").split())
        
        if board[row][col] != ' ':
            print("Cell already taken! Try again.")
            continue
        
        # Place the player's symbol on the board
        board[row][col] = current_player
        
        # Check if the current player has won
        if check_winner(board, current_player):
            print_board(board)
            print(f"Player {current_player} wins!")
            break
        
        # Check if the board is full
        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break
        
        # Switch player
        current_player = 'O' if current_player == 'X' else 'X'

# Run the Tic-Tac-Toe game
tic_tac_toe()
